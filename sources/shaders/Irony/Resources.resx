<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="FmtRowCol" xml:space="preserve">
    <value>{0}({1}:{2})</value>
  </data>
  <data name="ErrNodeTypeNotSetOn" xml:space="preserve">
    <value>Warning: AstNodeType or AstNodeCreator is not set on non-terminals: {0}.</value>
  </data>
  <data name="ErrNtRuleIsNull" xml:space="preserve">
    <value>Non-terminal {0} has uninitialized Rule property.</value>
  </data>
  <data name="ErrRootNotSet" xml:space="preserve">
    <value>Root property of the grammar is not set.</value>
  </data>
  <data name="ErrRRConflict" xml:space="preserve">
    <value>Reduce-reduce conflict. State {0}, lookaheads: {1}. Selected reduce on first production in conflict set.</value>
  </data>
  <data name="ErrRuleContainsNull" xml:space="preserve">
    <value>Rule for NonTerminal {0} contains null as an operand in position {1} in one of productions.</value>
  </data>
  <data name="ErrSRConflict" xml:space="preserve">
    <value>Shift-reduce conflict. State {0}, lookaheads [{1}]. Selected shift as preferred action.</value>
  </data>
  <data name="ErrParserUnexpInput" xml:space="preserve">
    <value>Syntax error, expected: {0}</value>
  </data>
  <data name="LabelEosLabel" xml:space="preserve">
    <value>[end-of-statement]</value>
  </data>
  <data name="ErrFailedCreateNode" xml:space="preserve">
    <value>Failed to create AST node for non-terminal [{0}], error: {1}</value>
  </data>
  <data name="ErrUnexpEof" xml:space="preserve">
    <value>Unexpected end of file.</value>
  </data>
  <data name="ErrUnexpIndent" xml:space="preserve">
    <value>Unexpected indentation.</value>
  </data>
  <data name="ErrUnmatchedCloseBrace" xml:space="preserve">
    <value>Unmatched closing brace '{0}'.</value>
  </data>
  <data name="LabelActionAccept" xml:space="preserve">
    <value>Accept</value>
  </data>
  <data name="LabelActionOp" xml:space="preserve">
    <value>Operator, shift to {0}/reduce on {1}.</value>
  </data>
  <data name="LabelActionReduce" xml:space="preserve">
    <value>Reduce on {0}</value>
  </data>
  <data name="LabelActionShift" xml:space="preserve">
    <value>Shift to {0}</value>
  </data>
  <data name="LabelActionUnknown" xml:space="preserve">
    <value>(Unknown action type)</value>
  </data>
  <data name="MsgTraceConflictResolved" xml:space="preserve">
    <value>Parsing conflict resolved in code.</value>
  </data>
  <data name="MsgTraceOpResolved" xml:space="preserve">
    <value>Operator - resolved to {0}</value>
  </data>
  <data name="MsgTracePoppedState" xml:space="preserve">
    <value>Popped state from stack, pushing {0}</value>
  </data>
  <data name="MsgTraceRecoverFailed" xml:space="preserve">
    <value>FAILED TO RECOVER</value>
  </data>
  <data name="MsgTraceRecovering" xml:space="preserve">
    <value>RECOVERING: popping stack, looking for state with error shift</value>
  </data>
  <data name="MsgTraceRecoverSuccess" xml:space="preserve">
    <value>RECOVERED</value>
  </data>
  <data name="LabelKeySymbol" xml:space="preserve">
    <value>(Key symbol)</value>
  </data>
  <data name="LabelKeyword" xml:space="preserve">
    <value>(Keyword)</value>
  </data>
  <data name="MsgTraceRecoverAction" xml:space="preserve">
    <value>RECOVERING: {0}</value>
  </data>
  <data name="MsgTraceRecoverReducing" xml:space="preserve">
    <value>RECOVERING: Reached end of error production, reducing.</value>
  </data>
  <data name="ErrRootNotRegistered" xml:space="preserve">
    <value>({0}) term passed as 'root' paramater to parserr is not Root or snippet root of the grammar. Add it to SnippetRoots set in grammar constructor.</value>
  </data>
  <data name="ErrListCannotBeTransient" xml:space="preserve">
    <value>List non-terminals cannot be marked transient; list: ({0})</value>
  </data>
  <data name="ErrTransientNtMustHaveOneTerm" xml:space="preserve">
    <value>Transient non-terminal must have zero or one non-punctuation child nodes; non-terminals: {0}.</value>
  </data>
  <data name="ErrLastTermOfErrorProd" xml:space="preserve">
    <value>The last term of production containing SyntaxError must be a terminal. NonTerminal: {0}</value>
  </data>
  <data name="ErrNoClosingBrace" xml:space="preserve">
    <value>No closing pair for opening symbol {0}</value>
  </data>
</root>