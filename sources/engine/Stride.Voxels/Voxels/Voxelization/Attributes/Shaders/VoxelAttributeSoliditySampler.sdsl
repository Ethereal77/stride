// Copyright (c) 2018-2021 Stride and its contributors (https://stride3d.net)
// Copyright (c) 2019 Sean Boettger <sean@whypenguins.com>
// See the LICENSE.md file in the project root for full license information.

namespace Stride.Rendering.Voxels
{
    shader VoxelAttributeSoliditySampler : IVoxelSampler, Texturing
    {
        compose VoxelStorageTextureShader storage;

        override float4 ComputeLocal(float3 position)
        {
            return float4(0,0,0,1);
        }

        float4 SetColor(float4 col)
        {
            return float4(0,0,0, col.a);
        }

        override float4 Sample(float3 position, float3 normal, float diameter)
        {
            return SetColor(storage.Sample(position, diameter, 0).rrrr);
        }

        override float4 SampleNearestMip(float3 position, float3 normal, float diameter)
        {
            return SetColor(storage.SampleNearestMip(position, diameter, 0).rrrr);
        }

        override float4 SampleByMipNearestMip(float3 position, float3 normal, float diameter)
        {
            return SetColor(storage.SampleByMipNearestMip(position, diameter, 0).rrrr);
        }

        override float4 SampleRaw(float3 pos, float mipmap, int textureID, int axis)
        {
            return storage.SampleRaw(pos, mipmap, textureID, axis);
        }

        override float VoxelSize()
        {
            return storage.VoxelSize();
        }
    };
}
