<!--
***********************************************************************************************
  Stride.Core.props

  Build file pre-included before the building of the project to configure solution-wide
  defaults, platforms, Target Frameworks (TFMs), language, runtime identifiers (RIDs), and
  prepare the steps for building the project and package the output.

  Copyright (C) 2020 Stride and its contributors
***********************************************************************************************
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- Setup this part according to your project if you want your .csproj to compile individually without going through the .sln file -->
  <PropertyGroup>
    <SolutionDir Condition=" '$(SolutionDir)' == '' ">$(MSBuildThisFileDirectory)..\..\build\</SolutionDir>
    <SolutionName Condition=" '$(SolutionName)' == '' ">Stride</SolutionName>
    <SolutionPath Condition=" '$(SolutionPath)' == '' ">$(SolutionDir)$(SolutionName).sln</SolutionPath>
  </PropertyGroup>

  <!-- Setup StridePlatform according to current TargetFramework/RuntimeIdentifier -->
  <PropertyGroup>
    <!-- Default values -->
    <StridePlatformOriginal>$(StridePlatform)</StridePlatformOriginal>
    <StridePlatform Condition=" ($(TargetFramework.StartsWith('net4')) Or '$(TargetFramework)' == 'netstandard2.0') And ('$(RuntimeIdentifier)' == '' Or $(RuntimeIdentifier.StartsWith('win'))) ">Windows</StridePlatform>
    <!-- Default fallback -->
    <StridePlatform Condition=" '$(StridePlatform)' == '' ">Windows</StridePlatform>

    <StridePlatformFullName Condition="'$(StridePlatformFullName)' == ''">$(StridePlatform)</StridePlatformFullName>
  </PropertyGroup>

  <!--Import Local Pre Settings for the solution being loaded -->
  <Import Project="$(SolutionDir)$(SolutionName).Build.props" Condition="Exists('$(SolutionDir)$(SolutionName).Build.props')" />
  <Import Project="$(SolutionDir)Stride.Core.Build.props" Condition="Exists('$(SolutionDir)Stride.Core.Build.props')" />

  <Import Project="$(MSBuildThisFileDirectory)Stride.Core.TargetFrameworks.Editor.props" />

  <!--
    Settings StridePlatform specific.
  -->
  <PropertyGroup>
    <!-- Using C# version 7.3 -->
    <LangVersion>7.3</LangVersion>
    <StridePlatformDefines>STRIDE_PLATFORM_WINDOWS;STRIDE_PLATFORM_WINDOWS_DESKTOP</StridePlatformDefines>

    <!-- NOTE: Ideally we would split using ItemGroup but then PropertyGroup are not properly evaluated if they contain ItemGroup (unless using Targets) -->
    <StridePlatforms Condition="'$(StridePlatforms)' == ''">Windows</StridePlatforms>
    <!-- Let's support escaped MSBuild variables, in case it was sent from Stride.build (not sure why but I couldn't make it work properly when passing to MSBuild.Properties) -->
    <StridePlatforms>$([MSBuild]::Unescape('$(StridePlatforms)'))</StridePlatforms>
    <_StridePlatforms>;$(StridePlatforms);</_StridePlatforms>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(StrideRuntime)' == 'true' And '$(StrideRuntimeNetStandard)' != 'true' ">
    <!-- Add netstandard2.0 no matter what (needed for references) -->
    <StrideRuntimeTargetFrameworks>netstandard2.0</StrideRuntimeTargetFrameworks>
    <StrideRuntimeTargetFrameworks Condition="$(_StridePlatforms.Contains(';Windows;')) And '$(StrideRuntimeWindowsDotNet)' == 'true'">$(StrideRuntimeTargetFrameworks);net461</StrideRuntimeTargetFrameworks>
    <StrideRuntimeTargetFrameworks Condition="$(_StridePlatforms.Contains(';Windows;')) And '$(StrideRuntimeWindowsNetCoreApp3)' == 'true'">$(StrideRuntimeTargetFrameworks);netcoreapp3.0</StrideRuntimeTargetFrameworks>

    <StrideRuntimeIdentifiers Condition="'$(StrideRuntimeNetStandardNoRuntimeIdentifiers)' != 'true' And ('$(TargetFramework)' == 'netstandard2.0' Or $(TargetFramework.StartsWith('net4')) Or $(TargetFramework.StartsWith('netcoreapp'))) And $(_StridePlatforms.Contains(';Windows;'))">$(StrideRuntimeIdentifiers);win</StrideRuntimeIdentifiers>
    <!-- Default: at least win (used when compiling only a single platform for netstandard assemblies) -->
    <StrideRuntimeIdentifiers Condition="'$(StrideRuntimeNetStandardNoRuntimeIdentifiers)' != 'true' And '$(TargetFramework)' == 'netstandard2.0' And '$(StrideRuntimeIdentifiers)' == ''">win</StrideRuntimeIdentifiers>

    <!-- Need to use a runtime identifier for all other platforms as a workaround https://github.com/NuGet/Home/issues/7661#issuecomment-450040204 -->
    <StrideRuntimeIdentifiers Condition="'$(StrideRuntimeNetStandardNoRuntimeIdentifiers)' != 'true' And '$(TargetFramework)' != 'netstandard2.0' And !$(TargetFramework.StartsWith('net4')) And !$(TargetFramework.StartsWith('netcoreapp'))">any</StrideRuntimeIdentifiers>

    <StrideRuntimeIdentifiers Condition="'$(StrideRuntimeIdentifiers)' != ''">;$(StrideRuntimeIdentifiers);</StrideRuntimeIdentifiers>

    <!-- Make sure RuntimeIdentifier is part of the list -->
    <StrideRuntimeIdentifier Condition="'$(StrideRuntimeIdentifiers)' != '' And $(StrideRuntimeIdentifiers.Contains(';$(RuntimeIdentifier);'))">$(RuntimeIdentifier)</StrideRuntimeIdentifier>
    <!-- Otherwise compute fallback -->
    <StrideRuntimeIdentifier Condition="'$(StrideRuntimeIdentifiers)' != '' And '$(StrideRuntimeIdentifier)' == ''">$(StrideRuntimeIdentifiers.Split(';', StringSplitOptions.RemoveEmptyEntries)[0])</StrideRuntimeIdentifier>

    <StrideRuntimeTargetFrameworks>$([MSBuild]::Unescape($(StrideRuntimeTargetFrameworks.Trim(';'))))</StrideRuntimeTargetFrameworks>
    <StrideRuntimeIdentifiers>$([MSBuild]::Unescape($(StrideRuntimeIdentifiers.Trim(';'))))</StrideRuntimeIdentifiers>

    <TargetFrameworks>$(StrideRuntimeTargetFrameworks)</TargetFrameworks>
    <RuntimeIdentifiers Condition="'$(StrideRuntimeIdentifiers)' != ''">$(StrideRuntimeIdentifiers)</RuntimeIdentifiers>

    <ExtrasBuildEachRuntimeIdentifier Condition="'$(RuntimeIdentifiers)' != ''">true</ExtrasBuildEachRuntimeIdentifier>

    <!-- UpToDate check doesn't work with multi-TFM projects! https://github.com/dotnet/project-system/issues/2487 -->
    <!--<DisableFastUpToDateCheck Condition="$(TargetFrameworks.Contains(';')) Or $(RuntimeIdentifiers.Contains(';'))">true</DisableFastUpToDateCheck>-->
    <!--<TargetFrameworks>net461;netstandard2.0</TargetFrameworks>-->
  </PropertyGroup>

  <PropertyGroup Condition=" '$(StrideRuntime)' == 'true' And '$(StrideRuntimeNetStandard)' == 'true' ">
    <TargetFramework>netstandard2.0</TargetFramework>
  </PropertyGroup>

  <!-- Force a full Build & Pack if dependency was only built with a single TargetFramework (which would set IsInnerBuild and skip any Pack logic)
       This is only a problem when building from command line, Visual Studio builds each project completely.
       Recursion is automatically avoided by MSBuild not rebuilding same target
       (we have to be careful to not introduce new global variables otherwise build becomes non-deterministic) -->
  <Target Name="_StrideTriggerPackOnInnerBuild"
        BeforeTargets="CoreCompile"
        Condition="'$(BuildingInsideVisualStudio)' != 'true' And '$(GeneratePackageOnBuild)' == 'true'">
    <MSBuild Projects="@(_MSBuildProjectReferenceExistent)"
             Condition="'%(_MSBuildProjectReferenceExistent.SetTargetFramework)' != ''"
             BuildInParallel="$(BuildInParallel)"
             Targets="Build;Pack"
             RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove);TargetFramework;RuntimeIdentifier;StrideGraphicsApi">
    </MSBuild>
  </Target>

  <Target Name="GetPackagingOutputs" Condition=" '$(StrideRuntime)' == 'true' And '$(StrideRuntimeNetStandard)' == 'true' " />

  <!-- Use default runtime as ref assembly -->
  <PropertyGroup>
    <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);_StrideIncludeRefAssemblies</TargetsForTfmSpecificBuildOutput>
  </PropertyGroup>
  <Target Name="_StrideIncludeRefAssemblies" Condition="'$(RuntimeIdentifiers)' != '' And '$(RuntimeIdentifier)' == $(RuntimeIdentifiers.Split(';')[0])">
    <ItemGroup>
      <TfmSpecificPackageFile Include="@(IntermediateAssembly)" PackagePath="ref/$(TargetFramework)" />
      <TfmSpecificPackageFile Include="@(DocFileItem)" PackagePath="ref/$(TargetFramework)" />
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <GenerateProjectSpecificOutputFolder>false</GenerateProjectSpecificOutputFolder>

    <!-- Defines the language of the project being compiled CSharp or Cpp - defined by default to CSharp, must be overriden to Cpp in a Cpp project -->
    <StrideProjectType Condition="'$(StrideProjectType)' == ''">CSharp</StrideProjectType>

    <!-- Flag used per-project settings to specify that it should only be compiled on Windows Desktop-->
    <StrideWindowsOnly Condition="'$(StrideWindowsOnly)' == ''">false</StrideWindowsOnly>

    <StrideSdkTargets Condition="'$(StrideSdkTargets)' == ''">$(MSBuildThisFileDirectory)Stride.Core.targets</StrideSdkTargets>
  </PropertyGroup>

  <Import Project="$(MSBuildThisFileDirectory)Stride.PackageVersion.targets"/>

  <!-- Sdk settings -->
  <PropertyGroup>
    <!-- If we don't set it, default targets will add PlatformName in some cases -->
    <BaseOutputPath>bin\</BaseOutputPath>
    <OutputPath>$(BaseOutputPath)$(Configuration)\</OutputPath>
    <BaseIntermediateOutputPath>obj\</BaseIntermediateOutputPath>
    <IntermediateOutputPath>$(BaseIntermediateOutputPath)$(Configuration)\</IntermediateOutputPath>
  </PropertyGroup>

  <!-- Default values -->
  <PropertyGroup>
    <StrideAssemblyProcessor Condition="'$(StrideAssemblyProcessor)' == ''">false</StrideAssemblyProcessor>
    <StrideAssemblyProcessorOptions Condition="'$(StrideAssemblyProcessorOptions)' == ''">--auto-notify-property --auto-module-initializer --serialization</StrideAssemblyProcessorOptions>
  </PropertyGroup>

  <!--
    Global Settings per project
  -->
  <PropertyGroup>
    <StrideCommonDependenciesDir Condition="'$(StrideCommonDependenciesDir)' == ''">$(MSBuildThisFileDirectory)..\..\deps\</StrideCommonDependenciesDir>
    <StrideCommonDependenciesDir Condition="'$(StrideCommonDependenciesDir)' != '' and !HasTrailingSlash('$(StrideCommonDependenciesDir)')">$(StrideCommonDependenciesDir)\</StrideCommonDependenciesDir>
    <ErrorReport>prompt</ErrorReport>
    <FileAlignment>512</FileAlignment>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(StridePlatform)' == 'Windows' ">
    <!-- Limited version used by tools but that doesn't require installation of .NET on most computers (4.5.1 is default of many OS, 4.5.2/4.6 isn't) -->
    <StridePlatformDefines>STRIDE_PLATFORM_WINDOWS;STRIDE_PLATFORM_WINDOWS_DESKTOP</StridePlatformDefines>
    <NUnitLiteBinDir>$(StrideCommonDependenciesDir)NUnitLite\net-4.0\</NUnitLiteBinDir>
  </PropertyGroup>

  <!--
    Settings StrideNETRuntime specific.
  -->
  <PropertyGroup Condition="$(TargetFramework.StartsWith('netcoreapp'))">
    <StrideNETRuntimeDefines>STRIDE_RUNTIME_CORECLR</StrideNETRuntimeDefines>
  </PropertyGroup>
  <PropertyGroup Condition="$(TargetFramework.StartsWith('net4'))">
    <StrideNETRuntimeDefines>STRIDE_RUNTIME_NETFW</StrideNETRuntimeDefines>
  </PropertyGroup>

  <PropertyGroup>
    <DefineConstants>$(StridePlatformDefines);$(DefineConstants)</DefineConstants>
    <DefineConstants Condition="'$(StrideNETRuntimeDefines)' != ''">$(DefineConstants);$(StrideNETRuntimeDefines)</DefineConstants>
  </PropertyGroup>

  <!-- SourceLink -->
  <ItemGroup>
    <PackageReference Include="Microsoft.SourceLink.GitHub" Condition="'$(StrideProjectType)' == 'CSharp'" Version="1.0.0" PrivateAssets="All"/>
  </ItemGroup>

  <!-- Used by Stride.build to detect if unit tests prefer to run in 32 or 64-bit
       (NOTE: It's a copy of Stride.UnitTests.targets one because some unit tests import Stride.Core.props rather than Stride.UnitTests.targets) -->
  <Target Name="_StrideAfterGetTargetPathWithTargetPlatformMoniker" AfterTargets="GetTargetPathWithTargetPlatformMoniker">
    <ItemGroup>
      <TargetPathWithTargetPlatformMoniker Update="$(TargetPath)">
        <PlatformTarget>$(PlatformTarget)</PlatformTarget>
      </TargetPathWithTargetPlatformMoniker>
    </ItemGroup>
  </Target>

</Project>
