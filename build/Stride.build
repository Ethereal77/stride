<!--
***********************************************************************************************
  Stride.build

  Build file used to build Stride and package it from the command line.

  Example of use:
    MSBuild Stride.build /t:Package

  Copyright (C) 2021 Stride and its contributors
***********************************************************************************************
-->
<Project ToolsVersion="15.0" DefaultTarget="Help" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <StrideRoot>$(MSBuildThisFileDirectory)..\</StrideRoot>
    <StrideSolution>$(StrideRoot)build\Stride</StrideSolution>
    <StrideSolutionLauncher>$(StrideRoot)build\Stride.Launcher</StrideSolutionLauncher>
    <StridePlatforms Condition="'$(StridePlatforms)' == ''">Windows</StridePlatforms>

    <BuildProperties>Configuration=Release;NoWarn=1591;DeployExtension=false;StridePlatforms=$([MSBuild]::Escape('$(StridePlatforms)'));StrideGraphicsApiDependentBuildAll=$(StrideGraphicsApiDependentBuildAll)</BuildProperties>
    <StrideSign Condition="'$(StrideSign)' == ''">true</StrideSign>
    <BuildProperties Condition="'$(StrideSign)' != ''">$(BuildProperties);StrideSign=$(StrideSign)</BuildProperties>

    <NuGetPath>$(MSBuildThisFileDirectory).nuget\NuGet.exe</NuGetPath>

    <XunitRunnerConsoleVersion>2.4.1</XunitRunnerConsoleVersion>
    <StrideStoreUrl Condition="'$(StrideStoreUrl)' == ''">https://api.nuget.org/v3/index.json</StrideStoreUrl>
    <AdvancedInstallerPath Condition="'$(AdvancedInstallerPath)' == '' And Exists('$(MSBuildProgramFiles32)\Caphyon\Advanced Installer 17.9\bin\x86\AdvancedInstaller.com')">$(MSBuildProgramFiles32)\Caphyon\Advanced Installer 17.9\bin\x86\AdvancedInstaller.com</AdvancedInstallerPath>
    <StrideBuildPrerequisitesInstaller Condition="'$(StrideBuildPrerequisitesInstaller)' == ''">true</StrideBuildPrerequisitesInstaller>
  </PropertyGroup>

  <UsingTask TaskName="Stride.GitVersioning.GenerateVersionFile" AssemblyFile="$(StrideRoot)deps\Stride.GitVersioning\bin\Debug\net472\Stride.GitVersioning.dll" />

  <Target Name="Help">
    <Message Importance="high" Text="TODO"/>
  </Target>

  <!--
    VSIX Stride plugin
      Don't forget to build for VS2013 by using MSBuild 12.0,
      or if you're using a newer version of MSBuild, pass the flag /p:VisualStudioVersion=12.0 when calling MSBuild in the command line.
  -->
  <Target Name="VSIXPlugin" DependsOnTargets="Restore">
    <ItemGroup>
      <FilesToDeleteVSIX Include="$(StrideRoot)bin\vsix\*.nupkg"/>
    </ItemGroup>
    <Delete Files="@(FilesToDeleteVSIX)"/>

    <MSBuild Targets="91-VisualStudio\Stride_VisualStudio_Package;91-VisualStudio\Stride_VisualStudio_PackageInstall" Projects="$(StrideSolution).sln" Properties="$(BuildProperties);Platform=Mixed Platforms"/>
    <Exec Command='"$(NuGetPath)" pack "$(StrideRoot)sources\tools\Stride.VisualStudio.Package\Stride.VisualStudio.Package.nuspec" -BasePath "$(StrideRoot)sources\tools\Stride.VisualStudio.Package" -OutputDirectory "$(StrideRoot)bin\vsix"' />
  </Target>

  <!--
    Package Installer: Install Prerequisites.
  -->
  <Target Name="PrerequisitesInstaller">
    <Delete Files="$(StrideRoot)Bin\Prerequisites\install-prerequisites.exe"/>
    <Exec Command='"$(AdvancedInstallerPath)" /rebuild "$(StrideRoot)sources\prerequisites\prerequisites.aip"'/>
  </Target>

  <!--
    Perform a full build: Build, Package.
  -->
  <Target Name="FullBuild">
    <CallTarget Targets="Build"/>
    <CallTarget Targets="Package"/>
    <CallTarget Targets="VSIXPlugin"/>
  </Target>

  <!--
    Publish Stride .nupkg from this folder to the store.
  -->
  <Target Name="Publish">
    <Error Condition="'$(StrideStoreApiKey)' == ''" Text="Missing environment variable StrideStoreApiKey"/>
    <!-- Waiting 30min in case NuGet.Gallery/Server takes time to process -->
    <ItemGroup>
      <NuGetPackage Include="..\bin\packages\*.nupkg"/>
      <!-- Remove GameStudio (pushed in a second stage) -->
      <NuGetPackage Remove="@(NuGetPackage)" Condition="$([System.String]::Copy('%(Filename)').Contains('Stride.GameStudio'))"/>
      <!-- Remove Samples.Templates (we use -SkipDuplicate since version is rarely bumped) -->
      <NuGetPackage Remove="@(NuGetPackage)" Condition="$([System.String]::Copy('%(Filename)').Contains('Stride.Samples.Templates'))"/>
    </ItemGroup>
    <Exec Command='"$(NuGetPath)" push %(NuGetPackage.Identity) -ApiKey $(StrideStoreApiKey) -Source $(StrideStoreUrl) -Timeout 1800 -NoSymbols'/>
    <Exec Command='"$(NuGetPath)" push ..\bin\packages\Stride.Samples.Templates*.nupkg -ApiKey $(StrideStoreApiKey) -Source $(StrideStoreUrl) -Timeout 1800 -NoSymbols -SkipDuplicate'/>
    <!-- Push GameStudio so that dependencies are already uploaded -->
    <Exec Command='"$(NuGetPath)" push ..\bin\packages\Stride.GameStudio*.nupkg -ApiKey $(StrideStoreApiKey) -Source $(StrideStoreUrl) -Timeout 1800 -NoSymbols'/>
  </Target>

  <!--
    Publish VSIX .nupkg from this folder to the store.
  -->
  <Target Name="PublishVSIX">
    <Error Condition="'$(StrideStoreApiKey)' == ''" Text="Missing environment variable StrideStoreApiKey"/>
    <Exec Command='"$(NuGetPath)" push ..\bin\vsix\*.nupkg -ApiKey $(StrideStoreApiKey) -Source $(StrideStoreUrl) -NoSymbols'/>
  </Target>

  <!--
    Build Stride: Windows.
  -->
  <Target Name="Clean">
    <Exec Command="RMDIR /Q /S $(StrideRoot)\Bin"/>
  </Target>

  <!-- Package -->
  <Target Name="PreparePackageBuild">
    <PropertyGroup>
      <BuildProperties>$(BuildProperties);StridePublicApi=true;StridePackageBuild=true</BuildProperties>
    </PropertyGroup>

    <ItemGroup>
      <FilesToDeletePackages Include="$(StrideRoot)bin\packages\*.nupkg"/>
    </ItemGroup>

    <Delete Files="@(FilesToDeletePackages)"/>

    <!-- Make sure Stride.GitVersioning is built to run the task to update package version.
         It might be better to move it to a prebuilt assembly if that becomes a problem.
    -->
    <MSBuild Targets="Restore" Projects="$(StrideRoot)deps\Stride.GitVersioning\Stride.GitVersioning.csproj"/>
    <MSBuild Targets="Build" Projects="$(StrideRoot)deps\Stride.GitVersioning\Stride.GitVersioning.csproj"/>

    <!-- Create SharedAssemblyInfo.NuGet.cs with Git information (different between official build and internal builds) -->
    <GenerateVersionFile RootDirectory="$(StrideRoot)"
                         VersionFile="sources\shared\SharedAssemblyInfo.cs"
                         GeneratedVersionFile="sources\shared\SharedAssemblyInfo.NuGet.cs"
                         RevisionGitHeight="true"
                         SpecialVersionGitCommit="true">

      <Output TaskParameter="NuGetVersion" PropertyName="StridePackageVersion"/>
    </GenerateVersionFile>

    <Message Text="Done preparing build for version $(StridePackageVersion)"/>
    <TeamCitySetBuildNumber BuildNumber="$(StridePackageVersion)" Condition="'$(TEAMCITY_BUILD_PROPERTIES_FILE)' != '' " />
  </Target>
  <PropertyGroup>
    <_StridePackageTargetPrerequisitesInstaller Condition="'$(StrideBuildPrerequisitesInstaller)' == 'true'">PrerequisitesInstaller</_StridePackageTargetPrerequisitesInstaller>
  </PropertyGroup>
  <Target Name="Package" DependsOnTargets="PreparePackageBuild;$(_StridePackageTargetPrerequisitesInstaller);Build;VSIXPlugin"/>

  <Target Name="RestoreInternal">
    <MSBuild Targets="Restore" Projects="$(StrideSolution).sln" Properties="StrideGraphicsApiDependentBuildAll=$(StrideGraphicsApiDependentBuildAll);StrideGraphicsApis=$(StrideGraphicsApis);StridePlatforms=$(StridePlatforms)" />
  </Target>

  <Target Name="Restore">
    <CallTarget Targets="RestoreInternal" />
  </Target>

  <Target Name="Build">
    <MSBuild Targets="Restore" Projects="$(MSBuildThisFileFullPath)" Properties="StridePlatforms=$(StridePlatforms);StrideSolution=$(StrideSolution);StrideGraphicsApiDependentBuildAll=$(StrideGraphicsApiDependentBuildAll)"/>
    <MSBuild Targets="Build" Projects="$(StrideSolution).sln" Properties="$(BuildProperties);Platform=Mixed Platforms"/>
  </Target>

  <Target Name="BuildRuntime">
    <PropertyGroup>
      <StrideSolution>$(StrideSolution).Runtime</StrideSolution>
    </PropertyGroup>
    <MSBuild Targets="Restore" Projects="$(MSBuildThisFileFullPath)" Properties="StridePlatforms=$(StridePlatforms);StrideSolution=$(StrideSolution)"/>
    <MSBuild Targets="Build" Projects="$(StrideSolution).sln" Properties="$(BuildProperties)"/>
  </Target>

  <Target Name="BuildWindows">
    <MSBuild Targets="Restore" Projects="$(MSBuildThisFileFullPath)" Properties="StridePlatforms=$(StridePlatforms);StrideSolution=$(StrideSolution);StrideGraphicsApiDependentBuildAll=$(StrideGraphicsApiDependentBuildAll)"/>
    <MSBuild Targets="Build" Projects="$(StrideSolution).sln" Properties="$(BuildProperties);StrideSkipAutoPack=true;StrideSkipUnitTests=true;StrideGraphicsApiDependentBuildAll=$(StrideGraphicsApiDependentBuildAll)"/>
  </Target>

  <Target Name="BuildWindowsDirect3D11">
    <MSBuild Targets="Restore" Projects="$(MSBuildThisFileFullPath)" Properties="StridePlatforms=$(StridePlatforms);StrideSolution=$(StrideSolution).Runtime"/>
    <MSBuild Targets="Build" Projects="$(StrideSolution).Runtime.sln" Properties="$(BuildProperties);StrideGraphicsApis=Direct3D11;StrideSkipAutoPack=true;StrideSkipUnitTests=true"/>
  </Target>

  <Target Name="BuildWindowsDirect3D12">
    <MSBuild Targets="Restore" Projects="$(MSBuildThisFileFullPath)" Properties="StridePlatforms=$(StridePlatforms);StrideSolution=$(StrideSolution).Runtime;StrideGraphicsApis=Direct3D12"/>
    <MSBuild Targets="Build" Projects="$(StrideSolution).Runtime.sln" Properties="$(BuildProperties);StrideGraphicsApis=Direct3D12;StrideSkipAutoPack=true;StrideSkipUnitTests=true"/>
  </Target>

  <Target Name="DownloadXunitRunnerConsole">
    <MakeDir Directories="$(MSBuildThisFileDirectory)packages"/>
    <PropertyGroup>
      <XunitRunnerConsolePathDefault>$(MSBuildThisFileDirectory)packages\xunit.runner.console.$(XunitRunnerConsoleVersion)\tools\net472\xunit.console.exe</XunitRunnerConsolePathDefault>
      <XunitRunnerConsolePathX86>$(MSBuildThisFileDirectory)packages\xunit.runner.console.$(XunitRunnerConsoleVersion)\tools\net472\xunit.console.x86.exe</XunitRunnerConsolePathX86>
    </PropertyGroup>
    <Exec Command='"$(NuGetPath)" install xunit.runner.console -Version $(XunitRunnerConsoleVersion)' Condition="!Exists('$(XunitRunnerConsolePathDefault)')" WorkingDirectory="$(MSBuildThisFileDirectory)packages" />
    <Error Text="Could not find xunit.runner at expected location [$(XunitRunnerConsolePathDefault)]" Condition="!Exists('$(XunitRunnerConsolePathDefault)')"/>
  </Target>

  <Target Name="RunTestsWindows" DependsOnTargets="DownloadXunitRunnerConsole">
    <!-- Remove artifacts generated during previous run -->
    <Delete Files="$(MSBuildThisFileDirectory)..\tests\local\**\*.*" />
    <!-- By default, enable all known categories -->
    <PropertyGroup>
      <StrideTestCategories Condition="'$(StrideTestCategories)' == ''">Simple;Game;VSPackage</StrideTestCategories>
    </PropertyGroup>
    <CreateItem Include="$(StrideTestCategories)">
      <Output TaskParameter="Include" ItemName="StrideTestCategoriesItem"/>
    </CreateItem>
    <!-- Restore NuGet packages -->
    <Message Importance="High" Text="Restoring NuGet packages"/>
    <MSBuild Targets="Restore" Projects="$(MSBuildThisFileDirectory)Stride.Tests.%(StrideTestCategoriesItem.Identity).slnf" />
    <!-- Build -->
    <Message Importance="High" Text="Building unit tests"/>
    <MSBuild Projects="$(MSBuildThisFileDirectory)Stride.Tests.%(StrideTestCategoriesItem.Identity).slnf" />
    <!-- Run tests -->
    <Message Importance="High" Text="Running unit tests"/>
    <Exec Command="dotnet test Stride.Tests.%(StrideTestCategoriesItem.Identity).slnf --no-build" IgnoreStandardErrorWarningFormat="true"/>
  </Target>

  <!--
    Package Launcher.
  -->
  <Target Name="PackageLauncher" DependsOnTargets="LauncherPrerequisitesInstaller">
    <ItemGroup>
      <FilesToDeleteLauncher Include="$(StrideRoot)bin\launcher\*.nupkg"/>
    </ItemGroup>

    <!-- Note: we avoid building again if BuildWindows was already ran just before -->
    <Delete Files="@(FilesToDeleteLauncher)"/>

    <!-- Generate the NuGet package for the Launcher application -->
    <Exec Command='"$(NuGetPath)" pack "$(StrideRoot)sources\launcher\Stride.Launcher\Stride.Launcher.nuspec" -BasePath "$(StrideRoot)sources\launcher\Stride.Launcher\bin\Release\publish" -OutputDirectory "$(StrideRoot)bin\launcher"' />
  </Target>

  <!--
    Package Installer: StrideSetup.exe.
  -->
  <Target Name="PackageInstallerSimple" DependsOnTargets="PackageLauncher">
    <Delete Files="$(StrideRoot)bin\launcher\StrideSetup.exe"/>
    <!-- Run advanced installer -->
    <Exec Command='"$(AdvancedInstallerPath)" /rebuild "$(StrideRoot)sources\launcher\Setup\setup.aip"'/>
    <Copy SourceFiles="$(StrideRoot)sources\launcher\Setup\setup-SetupFiles\StrideSetup.exe" DestinationFolder="$(StrideRoot)bin\launcher"/>
  </Target>
  <Target Name="PackageInstallerCustom" DependsOnTargets="PackageLauncher">
    <Error Condition="'$(CustomInstaller)' == '' Or '$(CustomInstallerStoreUrl)' == ''" Text="When CustomInstaller is set, CustomInstallerStoreUrl also needs to be defined"/>
    <PropertyGroup>
      <CustomInstallerNoSpace>$(CustomInstaller.Replace(' ', ''))</CustomInstallerNoSpace>
    </PropertyGroup>

    <Delete Files="StrideSetup$(CustomInstallerNoSpace).exe"/>
    <!-- Make sure it is deleted otherwise Advanced Installer complains (in case previous run didn't complete -->
    <Delete Files="$(StrideRoot)sources\launcher\Setup\setup-$(CustomInstallerNoSpace).aip"/>
    <!-- Duplicate setup.aip with different IDs -->
    <Exec Command='"$(AdvancedInstallerPath)" /edit "$(StrideRoot)sources\launcher\Setup\setup.aip" /DuplicateProject "$(StrideRoot)sources\launcher\Setup\setup-$(CustomInstallerNoSpace).aip"'/>
    <!-- Edit a few parameters -->
    <Exec Command='"$(AdvancedInstallerPath)" /edit "$(StrideRoot)sources\launcher\Setup\setup-$(CustomInstallerNoSpace).aip" /SetProperty BuildExeName="StrideSetup$(CustomInstallerNoSpace)"'/>
    <Exec Command='"$(AdvancedInstallerPath)" /edit "$(StrideRoot)sources\launcher\Setup\setup-$(CustomInstallerNoSpace).aip" /SetProperty ProductName="Stride $(CustomInstaller)"'/>
    <Exec Command='"$(AdvancedInstallerPath)" /edit "$(StrideRoot)sources\launcher\Setup\setup-$(CustomInstallerNoSpace).aip" /SetProperty AI_PRODUCTNAME_ARP="Stride $(CustomInstaller)"'/>

    <!-- Backup store.config -->
    <Copy SourceFiles="$(StrideRoot)sources\launcher\Stride.LauncherApp\bin\Release\store.config" DestinationFiles="$(StrideRoot)sources\launcher\Stride.LauncherApp\bin\Release\store.config.backup"/>

    <!-- Update store.config with additional parameters -->
    <Exec Command='"$(NuGetPath)" sources Add -Name "Stride $(CustomInstaller)" -Source "$(CustomInstallerStoreUrl)" -ConfigFile "$(StrideRoot)sources\launcher\Stride.LauncherApp\bin\Release\store.config"'/>

    <!-- Run advanced installer -->
    <Exec Command='"$(AdvancedInstallerPath)" /rebuild "$(StrideRoot)sources\launcher\Setup\setup-$(CustomInstallerNoSpace).aip"'/>
    <Copy SourceFiles="$(StrideRoot)sources\launcher\Setup\setup-$(CustomInstallerNoSpace)-SetupFiles\StrideSetup$(CustomInstallerNoSpace).exe" DestinationFolder="$(MSBuildThisFileDirectory)"/>
    <Delete Files="$(StrideRoot)sources\launcher\Setup\setup-$(CustomInstallerNoSpace).aip"/>

    <!-- Restore store.config -->
    <Copy SourceFiles="$(StrideRoot)sources\launcher\Stride.LauncherApp\bin\Release\store.config.backup" DestinationFiles="$(StrideRoot)Stride.LauncherApp\bin\Release\store.config"/>
    <Delete Files="$(StrideRoot)sources\launcher\Stride.LauncherApp\bin\Release\store.config.backup"/>
  </Target>
  <PropertyGroup>
    <!-- Choose proper target to execute -->
    <PackageInstallerTarget Condition="'$(CustomInstaller)' == ''">PackageInstallerSimple</PackageInstallerTarget>
    <PackageInstallerTarget Condition="'$(CustomInstaller)' != ''">PackageInstallerCustom</PackageInstallerTarget>
  </PropertyGroup>
  <Target Name="PackageInstaller" DependsOnTargets="$(PackageInstallerTarget)"/>

  <!--
    Package Installer: launcher-prerequisites.exe.
  -->
  <Target Name="LauncherPrerequisitesInstaller">
    <Exec Command='"$(AdvancedInstallerPath)" /rebuild "$(StrideRoot)sources\launcher\Prerequisites\launcher-prerequisites.aip"'/>
  </Target>

  <!--
    Perform a full build: Build, Package and PackageInstaller.
  -->
  <Target Name="FullBuildLauncher">
    <CallTarget Targets="BuildLauncher"/>
    <CallTarget Targets="PackageInstaller"/>
  </Target>

  <!--
    Publish Launcher nupkg from this folder to the store.
  -->
  <Target Name="PublishLauncher">
    <Error Condition="'$(StrideStoreApiKey)' == ''" Text="Missing environment variable StrideStoreApiKey"/>
    <Exec Command='"$(NuGetPath)" push ..\bin\launcher\*.nupkg -ApiKey $(StrideStoreApiKey) -Source $(StrideStoreUrl) -NoSymbols'/>
  </Target>

  <Target Name="BuildLauncher">
    <PropertyGroup>
      <StrideSolution>Stride.Launcher</StrideSolution>
    </PropertyGroup>
    <MSBuild Targets="Restore" Projects="$(MSBuildThisFileFullPath)" Properties="StridePlatforms=Windows;StrideSolution=$(StrideSolution)"/>
    <MSBuild Projects="..\sources\launcher\Stride.Launcher\Stride.Launcher.csproj" Targets="Publish" Properties="$(BuildProperties);PublishProfile=FolderProfile;SolutionName=Stride.Launcher" />
  </Target>
</Project>
